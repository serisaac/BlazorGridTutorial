@page "/people-grid"

@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorGridTutorial.Data
@using BlazorGridTutorial.Components
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime JSRuntime
@inject ApplicationDbContext DbContext
@inject IToastService ToastService

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Lista de personas desde la Base de Datos</h3>
    <button class="btn btn-success" @onclick="StartAddPerson">
        <span class="bi bi-plus-circle-fill me-2"></span>Añadir Nueva Persona
    </button>
</div>

<div class="mb-3">
    <input type="text" class="form-control w-50" placeholder="Buscar por nombre o apellido..."
           value="@searchQuery" @oninput="OnSearchInput" />
</div>

@if (people == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <div class="grid-container">
        <QuickGrid Items="@people" Pagination="@pagination">
            <PropertyColumn Property="@(p => p.Id)" Title="ID" Sortable="true" />
            <PropertyColumn Property="@(p => p.FirstName)" Title="Nombre" Sortable="true" />
            <PropertyColumn Property="@(p => p.LastName)" Title="Apellido" Sortable="true" />
            <PropertyColumn Property="@(p => p.BirthDate)" Title="Fecha de Nacimiento" Format="yyyy-MM-dd" />
            <TemplateColumn Title="Acciones">
                <button class="btn btn-sm btn-primary" @onclick="() => StartEditPerson(context)">Editar</button>
                <button class="btn btn-sm btn-danger ms-2" @onclick="() => DeletePerson(context)">Eliminar</button>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="@pagination" />
    </div>
}

<EditPersonModal Person="personToEdit" OnSave="SaveChanges" OnCancel="CancelEdit" />


@code {
    private IQueryable<Person>? people;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 3 };
    private Person? personToEdit;

    private string searchQuery = string.Empty;

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        await LoadGridData();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadGridData();
    }

    private void StartAddPerson()
    {
        personToEdit = new Person();
    }

    private void StartEditPerson(Person person)
    {
        personToEdit = new Person
        {
            Id = person.Id,
            FirstName = person.FirstName,
            LastName = person.LastName,
            HireDate = person.HireDate,
            BirthDate = person.BirthDate
        };
    }

    private async Task SaveChanges(Person updatedPerson)
    {
        string successMessage;
        if (updatedPerson.Id == 0)
        {
            updatedPerson.HireDate = DateOnly.FromDateTime(DateTime.Now);
            await DbContext.People.AddAsync(updatedPerson);
            successMessage = $"'{updatedPerson.FirstName}' ha sido añadido con éxito.";
        }
        else
        {
            var personInDb = await DbContext.People.FindAsync(updatedPerson.Id);
            if (personInDb != null)
            {
                personInDb.FirstName = updatedPerson.FirstName;
                personInDb.LastName = updatedPerson.LastName;
                personInDb.BirthDate = updatedPerson.BirthDate;
            }
            successMessage = $"'{updatedPerson.FirstName}' ha sido actualizado con éxito.";
        }
        await DbContext.SaveChangesAsync();
        ToastService.ShowSuccess(successMessage);
        await LoadGridData();
        personToEdit = null;
    }

    private void CancelEdit()
    {
        personToEdit = null;
    }

    private async Task DeletePerson(Person personToDelete)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de que quieres eliminar a {personToDelete.FirstName} {personToDelete.LastName}?");
        if (confirmed)
        {
            DbContext.People.Remove(personToDelete);
            await DbContext.SaveChangesAsync();
            ToastService.ShowSuccess($"'{personToDelete.FirstName}' ha sido eliminado.");
            await LoadGridData();
        }
    }

    private async Task LoadGridData()
    {
        var query = DbContext.People.AsQueryable();

        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            query = query.Where(p =>
    (p.FirstName != null && p.FirstName.ToLower().Contains(searchQuery.ToLower())) ||
    (p.LastName != null && p.LastName.ToLower().Contains(searchQuery.ToLower())));
        }

        var filteredData = await query.ToListAsync();
        people = filteredData.AsQueryable();

        StateHasChanged();
    }
}
